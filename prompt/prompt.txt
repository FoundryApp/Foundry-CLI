// package prompt

// import (
// 	"bytes"
// 	"fmt"

// 	"io"
// 	"os"
// 	"os/signal"
// 	"strings"
// 	"sync"
// 	"syscall"
// 	"time"

// 	"foundry/cli/logger"
// 	"foundry/cli/prompt/cmd"

// 	goprompt "github.com/mlejva/go-prompt"
// )

// // type CmdRunFunc func(args []string) error

// // type Cmd struct {
// // 	Text string
// // 	Desc string
// // 	Do   CmdRunFunc
// // }

// // func (c *Cmd) String() string {
// // 	return fmt.Sprintf("%s - %s\n", c.Text, c.Desc)
// // }

// // func (c *Cmd) ToSuggest() goprompt.Suggest {
// // 	return goprompt.Suggest{Text: c.Text, Description: c.Desc}
// // }

// type Prompt struct {
// 	cmds []*cmd.Cmd
// 	// TODO: vars should be here? At least writer

// 	// buf *bytes.Buffer
// 	buffer bytes.Buffer
// 	mutex  sync.Mutex
// }

// var (
// 	promptPrefix = "> "

// 	promptText = ""
// 	promptRow  = 0

// 	errorText = ""
// 	errorRow  = 0

// 	totalRows = 0
// 	freeRows  = 0

// 	parser = goprompt.NewStandardInputParser()
// 	writer = goprompt.NewStandardOutputWriter()

// 	// waitDuration = time.Millisecond * 400
// 	waitDuration = time.Millisecond * 10
// )

// func NewPrompt(cmds []*cmd.Cmd) *Prompt {
// 	return &Prompt{cmds: cmds, buffer: bytes.Buffer{}}
// }

// // func (p *Prompt) WriteToBuffer(s string) error {
// // 	_, err := p.buf.Write([]byte(s))
// // 	return err
// // }

// // func (p *Prompt) watchBuffer() {
// // 	for {
// // 		// logger.Fdebugln("Watch Buffer")

// // 		b := make([]byte, 1024)
// // 		if n, err := p.buf.Read(b); err == nil && n > 0 {
// // 			p.Print(string(b))
// // 			// logger.Fdebugln("BUFFER:", string(b))
// // 		} else if err != nil && err != io.EOF {
// // 			logger.FdebuglnFatal(err)
// // 			logger.LoglnFatal(err)
// // 		}

// // 		// time.Sleep(time.Millisecond * 10)
// // 	}
// // }

// // Write appends the contents of p to the buffer, growing the buffer as needed. It returns
// // the number of bytes written.
// func (p *Prompt) Write(b []byte) (n int, err error) {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	return p.buffer.Write(b)
// }

// func (p *Prompt) read(b []byte) (n int, err error) {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	return p.buffer.Read(b)
// }

// func (p *Prompt) print2() {
// 	for {
// 		b := make([]byte, 1024)
// 		if n, err := p.read(b); err == nil && n > 0 {
// 			p.Print(string(b[:n]))
// 		} else if err != nil && err != io.EOF {
// 			logger.Fdebugln(err)
// 			logger.ErrorLoglnFatal(err)
// 		}
// 	}
// }

// func (p *Prompt) Print(s string) {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	logger.Fdebugln("[print] totalRows:", totalRows)
// 	logger.Fdebugln("[print] promptRow:", promptRow)
// 	logger.Fdebugln("[print] errorRow:", errorRow)

// 	logger.Fdebugln("[print] raw:", s)
// 	trimmed := strings.TrimSpace(s)
// 	logger.Fdebugln("[print] trimmed:", trimmed)
// 	lines := strings.Split(trimmed, "\n")
// 	logger.Fdebugln("[print] totalLines:", len(lines))

// 	for _, l := range lines {
// 		logger.Fdebugln("[prompt] freeRows start:", freeRows)
// 		logger.Fdebugln("[prompt] line:", l)

// 		freeRows--

// 		// p.wGoToAndErasePrompt()
// 		// writer.Flush()

// 		writer.UnSaveCursor()
// 		writer.Flush()

// 		// t := fmt.Sprintf("[%v]%s\n", ix, l)
// 		// writer.WriteRawStr(t)
// 		writer.WriteRawStr(l + "\n")
// 		writer.Flush()

// 		writer.SaveCursor()
// 		writer.Flush()

// 		if freeRows <= 3 {
// 			newRows := 4 - freeRows
// 			logger.Fdebugln("[prompt] newRows:", newRows)

// 			// p.wGoToAndEraseError()
// 			// writer.CursorGoTo(errorRow, 0)
// 			// writer.Flush()
// 			// writer.EraseLine()
// 			// writer.Flush()

// 			p.wGoToAndErasePrompt()
// 			writer.Flush()
// 			// writer.CursorGoTo(promptRow, 0)
// 			// writer.Flush()
// 			// writer.EraseLine()
// 			// writer.Flush()
// 			// time.Sleep(waitDuration)
// 			for i := 0; i < newRows; i++ {
// 				writer.WriteRawStr("\n")
// 				writer.Flush()
// 			}
// 			// writer.WriteRawStr(strings.Repeat("\n", newRows))
// 			// writer.Flush()

// 			freeRows += newRows

// 			writer.UnSaveCursor()
// 			writer.Flush()
// 			// time.Sleep(waitDuration)

// 			writer.CursorUp(newRows)
// 			writer.Flush()
// 			// if newRows > 0 {
// 			// }
// 			writer.SaveCursor()
// 			writer.Flush()
// 			// time.Sleep(waitDuration)
// 		}

// 		logger.Fdebugln("[prompt] freeRows end:", freeRows)
// 	}

// 	p.wGoToAndRestoreError()
// 	// writer.CursorGoTo(errorRow, 0)
// 	writer.Flush()
// 	// writer.WriteRawStr(errorText)
// 	// writer.Flush()

// 	p.wGoToAndRestorePrompt()
// 	// writer.CursorGoTo(promptRow, 0)
// 	// writer.Flush()
// 	// writer.WriteRawStr(promptPrefix + promptText)
// 	// writer.Flush()

// 	writer.Flush()
// }

// func (p *Prompt) PrintInfo(s string) {
// 	p.wGoToAndEraseError()

// 	writer.SetColor(goprompt.Green, goprompt.DefaultColor, true)
// 	writer.WriteStr(s)
// 	writer.SetColor(goprompt.DefaultColor, goprompt.DefaultColor, true)
// 	writer.Flush()

// 	p.wGoToPrompt()
// }

// func (p *Prompt) SetPromptPrefix(s string) {
// 	promptPrefix = s
// }

// func (p *Prompt) Run() {
// 	size := parser.GetWinSize()

// 	// Watch for terminal size changes
// 	sigwinch := make(chan os.Signal, 1)
// 	defer close(sigwinch)
// 	signal.Notify(sigwinch, syscall.SIGWINCH)
// 	go func() {
// 		for {
// 			if _, ok := <-sigwinch; !ok {
// 				return
// 			}
// 			size = parser.GetWinSize()
// 			logger.Fdebugln("Terminal size change:", size)
// 			p.rerender(size)
// 		}
// 	}()

// 	p.rerender(size)

// 	interupOpt := goprompt.OptionAddKeyBind(goprompt.KeyBind{
// 		Key: goprompt.ControlC,
// 		Fn: func(buf *goprompt.Buffer) {
// 			os.Exit(0)
// 		},
// 	})
// 	prefixOpt := goprompt.OptionPrefix(promptPrefix)
// 	livePrefixOpt := goprompt.OptionLivePrefix(func() (prefix string, useLivePrefix bool) {
// 		return promptPrefix, true
// 	})

// 	newp := goprompt.New(p.executor, p.completer, interupOpt, prefixOpt, livePrefixOpt)

// 	// go p.watchBuffer()

// 	go p.print2()

// 	newp.Run()
// }

// func (p *Prompt) completer(d goprompt.Document) []goprompt.Suggest {
// 	promptText = d.CurrentLine()

// 	s := []goprompt.Suggest{}
// 	for _, c := range p.cmds {
// 		s = append(s, c.ToSuggest())
// 	}

// 	return []goprompt.Suggest{}
// 	// return goprompt.FilterHasPrefix(s, d.GetWordBeforeCursor(), true)
// }

// func (p *Prompt) executor(s string) {
// 	if s == "" {
// 		return
// 	}

// 	fields := strings.Fields(s)

// 	if cmd := p.getCommand(fields[0]); cmd != nil {
// 		args := fields[1:]

// 		if err := cmd.Do(args); err != nil {
// 			logger.FdebuglnFatal(err)
// 			logger.ErrorLoglnFatal(err)
// 		}
// 	} else {
// 		p.wGoToAndEraseError()

// 		writer.SetColor(goprompt.Red, goprompt.DefaultColor, true)
// 		// errorText = fmt.Sprintf("Unknown command '%s'. Write 'help' to list available commands.\n", fields[0])
// 		errorText = fmt.Sprintf("Unknown command '%s'", fields[0])
// 		writer.WriteStr(errorText)
// 		writer.SetColor(goprompt.DefaultColor, goprompt.DefaultColor, false)
// 		writer.Flush()

// 		p.wGoToPrompt()
// 	}
// }

// func (p *Prompt) getCommand(s string) *cmd.Cmd {
// 	for _, c := range p.cmds {
// 		if c.Text == s {
// 			return c
// 		}
// 	}
// 	return nil
// }

// func (p *Prompt) rerender(size *goprompt.WinSize) {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	totalRows = int(size.Row)
// 	promptRow = totalRows
// 	errorRow = promptRow - 1
// 	freeRows = totalRows

// 	// So the initial UnSave is at 0,0
// 	writer.CursorGoTo(0, 0)
// 	writer.Flush()
// 	writer.SaveCursor()
// 	writer.Flush()

// 	// Clears the screen and moves cursor to promptRow
// 	p.wReset()

// 	// Restore prompt + error
// 	p.wGoToAndRestoreError()
// 	p.wGoToAndRestorePrompt()

// 	logger.Fdebugln("totalRows:", totalRows)
// 	logger.Fdebugln("promptRow:", promptRow)
// 	logger.Fdebugln("errorRow:", errorRow)
// 	logger.Fdebugln("freeRows:", freeRows)
// }

// func (p *Prompt) wReset() {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	writer.EraseScreen()
// 	writer.CursorGoTo(promptRow, 0)
// 	writer.Flush()
// }

// func (p *Prompt) wGoToPrompt() {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	writer.CursorGoTo(promptRow, 0)
// 	writer.Flush()
// }

// func (p *Prompt) wGoToError() {
// 	p.mutex.Lock()
// 	defer p.mutex.Unlock()
// 	writer.CursorGoTo(errorRow, 0)
// 	writer.Flush()
// }

// func (p *Prompt) wGoToAndErasePrompt() {
// 	p.wGoToPrompt()
// 	writer.EraseLine()
// 	writer.Flush()
// }

// func (p *Prompt) wGoToAndEraseError() {
// 	p.wGoToError()
// 	writer.EraseLine()
// 	writer.Flush()
// }

// func (p *Prompt) wGoToAndRestorePrompt() {
// 	p.wGoToPrompt()
// 	writer.SetColor(goprompt.Blue, goprompt.DefaultColor, false)
// 	writer.WriteRawStr(promptPrefix)
// 	writer.SetColor(goprompt.DefaultColor, goprompt.DefaultColor, false)
// 	writer.WriteRawStr(promptText)
// 	writer.Flush()
// }

// func (p *Prompt) wGoToAndRestoreError() {
// 	p.wGoToError()

// 	writer.SetColor(goprompt.Red, goprompt.DefaultColor, true)
// 	writer.WriteRawStr(errorText)
// 	writer.SetColor(goprompt.DefaultColor, goprompt.DefaultColor, false)

// 	// writer.Flush()
// }
